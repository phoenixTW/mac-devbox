name: Test Installation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-install:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test REF detection logic
        run: |
          echo "🧪 Testing REF detection logic..."
          REPO="phoenixTW/mac-devbox"
          DEBUG="1"

          detect_ref() {
            local detected_ref=""
            
            # Method 1: Try to detect from HTTP_REFERER if available
            if [[ -n "${HTTP_REFERER:-}" ]]; then
              detected_ref=$(echo "$HTTP_REFERER" | grep -oE "refs/tags/[^/]+" | sed "s|refs/tags/||" 2>/dev/null || true)
              [[ "$DEBUG" == "1" ]] && echo "DEBUG: Detected REF from HTTP_REFERER: $detected_ref" >&2
            fi
            
            # Method 2: Try to read from local lib/common.sh if available
            if [[ -z "$detected_ref" && -f "lib/common.sh" ]]; then
              detected_ref=$(grep "get_version()" lib/common.sh | sed "s/.*echo \"\([^\"]*\)\".*/\1/" 2>/dev/null || true)
              [[ "$DEBUG" == "1" ]] && echo "DEBUG: Detected REF from lib/common.sh: $detected_ref" >&2
            fi
            
            # Method 3: Fallback to latest release from GitHub API (simple approach without jq)
            if [[ -z "$detected_ref" ]]; then
              detected_ref=$(curl -fsSL "https://api.github.com/repos/$REPO/releases/latest" 2>/dev/null | grep "\"tag_name\"" | sed "s/.*\"tag_name\": *\"\([^\"]*\)\".*/\1/" || echo "main")
              [[ "$DEBUG" == "1" ]] && echo "DEBUG: Detected REF from GitHub API: $detected_ref" >&2
            fi
            
            # Final fallback
            echo "${detected_ref:-main}"
          }

          REF="${REF:-$(detect_ref)}"
          echo "✅ Final REF: $REF"
          echo "✅ Download URL: https://codeload.github.com/$REPO/tar.gz/$REF"

          # Test URL accessibility
          echo "Testing URL accessibility..."
          if curl -fsSL -I "https://codeload.github.com/$REPO/tar.gz/$REF" >/dev/null 2>&1; then
            echo "✅ URL is accessible"
          else
            echo "❌ URL is not accessible"
            exit 1
          fi

      - name: Test install.sh script syntax
        run: |
          echo "🧪 Testing install.sh script syntax..."
          bash -n install.sh
          echo "✅ Script syntax is valid"

      - name: Test one-liner installation from commit SHA
        run: |
          echo "🧪 Testing one-liner installation from commit SHA..."

          # Set up test environment
          export HOME="/tmp/test-devbox-oneliner"
          export DEVBOX_CONFIG_DIR="$HOME/.devbox"
          export BIN_DIR="$HOME/.local/bin"

          # Clean up any existing test environment
          rm -rf "$HOME"
          mkdir -p "$HOME" "$BIN_DIR"

          echo "Test environment: $HOME"
          echo "Testing commit SHA: $GITHUB_SHA"
          echo "Event type: $GITHUB_EVENT_NAME"

          # Test the actual one-liner command using the exact commit being tested
          # This tests the complete flow: curl -> download -> install from the exact commit
          echo "Running one-liner installation command from commit $GITHUB_SHA..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/phoenixTW/mac-devbox/${GITHUB_SHA}/install.sh)"

          # Verify installation
          echo "Verifying one-liner installation from commit $GITHUB_SHA..."
          if [[ -f "$BIN_DIR/devbox" ]]; then
            echo "✅ devbox binary installed via one-liner from commit $GITHUB_SHA"
          else
            echo "❌ devbox binary not found"
            exit 1
          fi

          if [[ -d "$DEVBOX_CONFIG_DIR" ]]; then
            echo "✅ config directory created via one-liner from commit $GITHUB_SHA"
            if [[ -f "$DEVBOX_CONFIG_DIR/brew-formulae.txt" ]]; then
              echo "✅ brew-formulae.txt created"
            else
              echo "❌ brew-formulae.txt not found"
              exit 1
            fi
            if [[ -f "$DEVBOX_CONFIG_DIR/brew-casks.txt" ]]; then
              echo "✅ brew-casks.txt created"
            else
              echo "❌ brew-casks.txt not found"
              exit 1
            fi
            if [[ -f "$DEVBOX_CONFIG_DIR/asdf-tools.json" ]]; then
              echo "✅ asdf-tools.json created"
            else
              echo "❌ asdf-tools.json not found"
              exit 1
            fi
          else
            echo "❌ config directory not created"
            exit 1
          fi

          # Test devbox command
          if "$BIN_DIR/devbox" version >/dev/null 2>&1; then
            echo "✅ devbox command works after one-liner install from commit $GITHUB_SHA"
          else
            echo "❌ devbox command failed"
            exit 1
          fi

          # Test shell completions
          if [[ -f "$HOME/.zsh/completions/_devbox" ]]; then
            echo "✅ zsh completion installed via one-liner from commit $GITHUB_SHA"
          else
            echo "❌ zsh completion not found"
            exit 1
          fi

          if [[ -f "$HOME/.bash_completion.d/devbox" ]]; then
            echo "✅ bash completion installed via one-liner from commit $GITHUB_SHA"
          else
            echo "❌ bash completion not found"
            exit 1
          fi

          # Test PATH setup
          if grep -q "\$HOME/.local/bin" "$HOME/.zprofile" 2>/dev/null; then
            echo "✅ PATH added to zprofile via one-liner from commit $GITHUB_SHA"
          else
            echo "❌ PATH not added to zprofile"
            exit 1
          fi

          # Test zshrc modification
          if grep -q "devbox completions" "$HOME/.zshrc" 2>/dev/null; then
            echo "✅ zshrc modified for completions via one-liner from commit $GITHUB_SHA"
          else
            echo "❌ zshrc not modified for completions"
            exit 1
          fi

          # Clean up
          rm -rf "$HOME"
          echo "✅ One-liner installation test from commit $GITHUB_SHA completed"

      - name: Test end-to-end bootstrap process
        run: |
          echo "🧪 Testing end-to-end bootstrap process..."

          # Set up test environment
          export HOME="/tmp/test-devbox-bootstrap"
          export DEVBOX_CONFIG_DIR="$HOME/.devbox"
          export BIN_DIR="$HOME/.local/bin"

          # Clean up any existing test environment
          rm -rf "$HOME"
          mkdir -p "$HOME" "$BIN_DIR"

          echo "Test environment: $HOME"
          echo "Testing commit SHA: $GITHUB_SHA"
          echo "Current PATH: $PATH"
          echo "Current shell: $SHELL"

          # Install devbox using one-liner
          echo "Installing devbox via one-liner..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/phoenixTW/mac-devbox/${GITHUB_SHA}/install.sh)"

          # Verify installation
          if [[ ! -f "$BIN_DIR/devbox" ]]; then
            echo "❌ devbox binary not found"
            exit 1
          fi

          # Set up shell environment
          echo "Setting up shell environment..."
          # Check if files exist before sourcing
          if [[ -f "$HOME/.zprofile" ]]; then
            echo "Sourcing .zprofile..."
            . "$HOME/.zprofile" 2>/dev/null || echo "Warning: Failed to source .zprofile"
          else
            echo "Warning: .zprofile not found"
          fi

          if [[ -f "$HOME/.zshrc" ]]; then
            echo "Sourcing .zshrc..."
            . "$HOME/.zshrc" 2>/dev/null || echo "Warning: Failed to source .zshrc"
          else
            echo "Warning: .zshrc not found"
          fi

          # Ensure devbox is in PATH (fallback if shell files failed)
          if ! command -v devbox >/dev/null 2>&1; then
            echo "devbox not in PATH, adding manually..."
            export PATH="$HOME/.local/bin:$PATH"
            if ! command -v devbox >/dev/null 2>&1; then
              echo "❌ devbox command not found in PATH"
              echo "PATH: $PATH"
              echo "BIN_DIR: $BIN_DIR"
              echo "devbox binary exists: $([[ -f "$BIN_DIR/devbox" ]] && echo "yes" || echo "no")"
              exit 1
            fi
          fi

          echo "✅ devbox is accessible in shell environment"

          # Run bootstrap with timeout (15 minutes)
          echo "Running devbox bootstrap (with 15-minute timeout)..."
          # Check if timeout command is available
          if command -v timeout >/dev/null 2>&1; then
            echo "Using timeout command..."
            if timeout 900 "$BIN_DIR/devbox" bootstrap; then
              echo "✅ devbox bootstrap completed successfully"
            else
              bootstrap_exit_code=$?
              if [[ $bootstrap_exit_code -eq 124 ]]; then
                echo "❌ devbox bootstrap timed out after 15 minutes"
                exit 1
              else
                echo "❌ devbox bootstrap failed with exit code: $bootstrap_exit_code"
                exit 1
              fi
            fi
          else
            echo "Warning: timeout command not available, running without timeout..."
            if "$BIN_DIR/devbox" bootstrap; then
              echo "✅ devbox bootstrap completed successfully"
            else
              bootstrap_exit_code=$?
              echo "❌ devbox bootstrap failed with exit code: $bootstrap_exit_code"
              exit 1
            fi
          fi

          # Verify Homebrew installation (user-scoped)
          echo "Verifying user-scoped Homebrew installation..."
          if [[ -d "$HOME/.homebrew" && -x "$HOME/.homebrew/bin/brew" ]]; then
            echo "✅ Homebrew installed in user directory: $HOME/.homebrew"
            
            # Check that brew works
            if "$HOME/.homebrew/bin/brew" --version >/dev/null 2>&1; then
              echo "✅ Homebrew is functional"
            else
              echo "❌ Homebrew binary not functional"
              exit 1
            fi
            
            # Verify no sudo was required (check ownership)
            if [[ "$(stat -f '%Su' "$HOME/.homebrew" 2>/dev/null || stat -c '%U' "$HOME/.homebrew" 2>/dev/null)" == "$(whoami)" ]]; then
              echo "✅ Homebrew directory owned by current user (no sudo required)"
            else
              echo "❌ Homebrew directory not owned by current user"
              exit 1
            fi
          else
            echo "❌ Homebrew not found in user directory"
            exit 1
          fi

          # Verify basic packages are installed
          echo "Verifying basic package installation..."
          if "$HOME/.homebrew/bin/brew" list --formula | grep -q "git"; then
            echo "✅ git formula installed"
          else
            echo "❌ git formula not installed"
            exit 1
          fi

          if "$HOME/.homebrew/bin/brew" list --formula | grep -q "curl"; then
            echo "✅ curl formula installed"
          else
            echo "❌ curl formula not installed"
            exit 1
          fi

          if "$HOME/.homebrew/bin/brew" list --formula | grep -q "jq"; then
            echo "✅ jq formula installed"
          else
            echo "❌ jq formula not installed"
            exit 1
          fi

          # Verify asdf is working
          echo "Verifying asdf installation..."
          if command -v asdf >/dev/null 2>&1; then
            echo "✅ asdf command available"
            if asdf version >/dev/null 2>&1; then
              echo "✅ asdf is functional"
            else
              echo "❌ asdf not functional"
              exit 1
            fi
          else
            echo "❌ asdf command not found"
            exit 1
          fi

          # Verify shell configuration
          echo "Verifying shell configuration..."
          if [[ -d "$HOME/.oh-my-zsh" ]]; then
            echo "✅ oh-my-zsh installed"
          else
            echo "❌ oh-my-zsh not installed"
            exit 1
          fi

          if grep -q "agnoster" "$HOME/.zshrc" 2>/dev/null; then
            echo "✅ agnoster theme configured"
          else
            echo "❌ agnoster theme not configured"
            exit 1
          fi

          # Verify PATH configuration
          if grep -q "\.local/bin" "$HOME/.zprofile" 2>/dev/null; then
            echo "✅ PATH configured in .zprofile"
          else
            echo "❌ PATH not configured in .zprofile"
            exit 1
          fi

          # Clean up
          rm -rf "$HOME"
          echo "✅ End-to-end bootstrap test completed successfully"
