name: Test Installation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-install:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test REF detection logic
        run: |
          echo "üß™ Testing REF detection logic..."
          REPO="phoenixTW/mac-devbox"
          DEBUG="1"

          detect_ref() {
            local detected_ref=""
            
            # Method 1: Try to detect from HTTP_REFERER if available
            if [[ -n "${HTTP_REFERER:-}" ]]; then
              detected_ref=$(echo "$HTTP_REFERER" | grep -oE "refs/tags/[^/]+" | sed "s|refs/tags/||" 2>/dev/null || true)
              [[ "$DEBUG" == "1" ]] && echo "DEBUG: Detected REF from HTTP_REFERER: $detected_ref" >&2
            fi
            
            # Method 2: Try to read from local lib/common.sh if available
            if [[ -z "$detected_ref" && -f "lib/common.sh" ]]; then
              detected_ref=$(grep "get_version()" lib/common.sh | sed "s/.*echo \"\([^\"]*\)\".*/\1/" 2>/dev/null || true)
              [[ "$DEBUG" == "1" ]] && echo "DEBUG: Detected REF from lib/common.sh: $detected_ref" >&2
            fi
            
            # Method 3: Fallback to latest release from GitHub API (simple approach without jq)
            if [[ -z "$detected_ref" ]]; then
              detected_ref=$(curl -fsSL "https://api.github.com/repos/$REPO/releases/latest" 2>/dev/null | grep "\"tag_name\"" | sed "s/.*\"tag_name\": *\"\([^\"]*\)\".*/\1/" || echo "main")
              [[ "$DEBUG" == "1" ]] && echo "DEBUG: Detected REF from GitHub API: $detected_ref" >&2
            fi
            
            # Final fallback
            echo "${detected_ref:-main}"
          }

          REF="${REF:-$(detect_ref)}"
          echo "‚úÖ Final REF: $REF"
          echo "‚úÖ Download URL: https://codeload.github.com/$REPO/tar.gz/$REF"

          # Test URL accessibility
          echo "Testing URL accessibility..."
          if curl -fsSL -I "https://codeload.github.com/$REPO/tar.gz/$REF" >/dev/null 2>&1; then
            echo "‚úÖ URL is accessible"
          else
            echo "‚ùå URL is not accessible"
            exit 1
          fi

      - name: Test install.sh script syntax
        run: |
          echo "üß™ Testing install.sh script syntax..."
          bash -n install.sh
          echo "‚úÖ Script syntax is valid"

      - name: Test installation from main branch
        run: |
          echo "üß™ Testing installation from main branch..."

          # Set up test environment
          export HOME="/tmp/test-devbox-main"
          export DEVBOX_CONFIG_DIR="$HOME/.devbox"
          export BIN_DIR="$HOME/.local/bin"

          # Clean up any existing test environment
          rm -rf "$HOME"
          mkdir -p "$HOME" "$BIN_DIR"

          echo "Test environment: $HOME"

          # Test the installation
          bash install.sh

          # Verify installation
          echo "Verifying installation..."
          if [[ -f "$BIN_DIR/devbox" ]]; then
            echo "‚úÖ devbox binary installed"
          else
            echo "‚ùå devbox binary not found"
            exit 1
          fi

          if [[ -d "$DEVBOX_CONFIG_DIR" ]]; then
            echo "‚úÖ config directory created"
            if [[ -f "$DEVBOX_CONFIG_DIR/brew-formulae.txt" ]]; then
              echo "‚úÖ brew-formulae.txt created"
            else
              echo "‚ùå brew-formulae.txt not found"
              exit 1
            fi
            if [[ -f "$DEVBOX_CONFIG_DIR/brew-casks.txt" ]]; then
              echo "‚úÖ brew-casks.txt created"
            else
              echo "‚ùå brew-casks.txt not found"
              exit 1
            fi
            if [[ -f "$DEVBOX_CONFIG_DIR/asdf-tools.json" ]]; then
              echo "‚úÖ asdf-tools.json created"
            else
              echo "‚ùå asdf-tools.json not found"
              exit 1
            fi
          else
            echo "‚ùå config directory not created"
            exit 1
          fi

          # Test devbox command
          if "$BIN_DIR/devbox" version >/dev/null 2>&1; then
            echo "‚úÖ devbox command works"
          else
            echo "‚ùå devbox command failed"
            exit 1
          fi

          # Clean up
          rm -rf "$HOME"
          echo "‚úÖ Main branch installation test completed"

      - name: Test installation from release tag
        run: |
          echo "üß™ Testing installation from release tag..."

          # Set up test environment
          export HOME="/tmp/test-devbox-tag"
          export DEVBOX_CONFIG_DIR="$HOME/.devbox"
          export BIN_DIR="$HOME/.local/bin"

          # Clean up any existing test environment
          rm -rf "$HOME"
          mkdir -p "$HOME" "$BIN_DIR"

          echo "Test environment: $HOME"

          # Test installation from release tag
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/phoenixTW/mac-devbox/refs/tags/0.0.1/install.sh)"

          # Verify installation
          echo "Verifying installation..."
          if [[ -f "$BIN_DIR/devbox" ]]; then
            echo "‚úÖ devbox binary installed"
          else
            echo "‚ùå devbox binary not found"
            exit 1
          fi

          if [[ -d "$DEVBOX_CONFIG_DIR" ]]; then
            echo "‚úÖ config directory created"
          else
            echo "‚ùå config directory not created"
            exit 1
          fi

          # Test devbox command
          if "$BIN_DIR/devbox" version >/dev/null 2>&1; then
            echo "‚úÖ devbox command works"
          else
            echo "‚ùå devbox command failed"
            exit 1
          fi

          # Clean up
          rm -rf "$HOME"
          echo "‚úÖ Release tag installation test completed"

      - name: Test with explicit REF override
        run: |
          echo "üß™ Testing with explicit REF override..."

          # Set up test environment
          export HOME="/tmp/test-devbox-ref"
          export DEVBOX_CONFIG_DIR="$HOME/.devbox"
          export BIN_DIR="$HOME/.local/bin"
          export REF="main"

          # Clean up any existing test environment
          rm -rf "$HOME"
          mkdir -p "$HOME" "$BIN_DIR"

          echo "Test environment: $HOME"
          echo "Using explicit REF: $REF"

          # Test the installation with explicit REF
          bash install.sh

          # Verify installation
          if [[ -f "$BIN_DIR/devbox" ]]; then
            echo "‚úÖ devbox binary installed with explicit REF"
          else
            echo "‚ùå devbox binary not found"
            exit 1
          fi

          # Clean up
          rm -rf "$HOME"
          echo "‚úÖ Explicit REF override test completed"

      - name: Test debug mode
        run: |
          echo "üß™ Testing debug mode..."

          # Set up test environment
          export HOME="/tmp/test-devbox-debug"
          export DEVBOX_CONFIG_DIR="$HOME/.devbox"
          export BIN_DIR="$HOME/.local/bin"
          export DEVBOX_DEBUG="1"

          # Clean up any existing test environment
          rm -rf "$HOME"
          mkdir -p "$HOME" "$BIN_DIR"

          echo "Test environment: $HOME"

          # Test the installation with debug mode
          bash install.sh 2>&1 | grep -q "DEBUG:" && echo "‚úÖ Debug output detected" || echo "‚ùå No debug output"

          # Verify installation still works
          if [[ -f "$BIN_DIR/devbox" ]]; then
            echo "‚úÖ devbox binary installed in debug mode"
          else
            echo "‚ùå devbox binary not found"
            exit 1
          fi

          # Clean up
          rm -rf "$HOME"
          echo "‚úÖ Debug mode test completed"

      - name: Test shell completions
        run: |
          echo "üß™ Testing shell completions..."

          # Set up test environment
          export HOME="/tmp/test-devbox-completions"
          export DEVBOX_CONFIG_DIR="$HOME/.devbox"
          export BIN_DIR="$HOME/.local/bin"

          # Clean up any existing test environment
          rm -rf "$HOME"
          mkdir -p "$HOME" "$BIN_DIR"

          echo "Test environment: $HOME"

          # Test the installation
          bash install.sh

          # Check if completions were installed
          if [[ -f "$HOME/.zsh/completions/_devbox" ]]; then
            echo "‚úÖ zsh completion installed"
          else
            echo "‚ùå zsh completion not found"
            exit 1
          fi

          if [[ -f "$HOME/.bash_completion.d/devbox" ]]; then
            echo "‚úÖ bash completion installed"
          else
            echo "‚ùå bash completion not found"
            exit 1
          fi

          # Check if zshrc was modified
          if grep -q "devbox completions" "$HOME/.zshrc" 2>/dev/null; then
            echo "‚úÖ zshrc modified for completions"
          else
            echo "‚ùå zshrc not modified for completions"
            exit 1
          fi

          # Clean up
          rm -rf "$HOME"
          echo "‚úÖ Shell completions test completed"

      - name: Test PATH setup
        run: |
          echo "üß™ Testing PATH setup..."

          # Set up test environment
          export HOME="/tmp/test-devbox-path"
          export DEVBOX_CONFIG_DIR="$HOME/.devbox"
          export BIN_DIR="$HOME/.local/bin"

          # Clean up any existing test environment
          rm -rf "$HOME"
          mkdir -p "$HOME" "$BIN_DIR"

          echo "Test environment: $HOME"

          # Test the installation
          bash install.sh

          # Check if PATH was added to zprofile
          if grep -q "\$HOME/.local/bin" "$HOME/.zprofile" 2>/dev/null; then
            echo "‚úÖ PATH added to zprofile"
          else
            echo "‚ùå PATH not added to zprofile"
            exit 1
          fi

          # Clean up
          rm -rf "$HOME"
          echo "‚úÖ PATH setup test completed"

      - name: Final verification
        run: |
          echo "üéâ All installation tests passed!"
          echo "‚úÖ REF detection logic works"
          echo "‚úÖ Script syntax is valid"
          echo "‚úÖ Main branch installation works"
          echo "‚úÖ Release tag installation works"
          echo "‚úÖ Explicit REF override works"
          echo "‚úÖ Debug mode works"
          echo "‚úÖ Shell completions work"
          echo "‚úÖ PATH setup works"
          echo ""
          echo "üöÄ Installation is ready for release!"
