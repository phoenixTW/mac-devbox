#!/usr/bin/env bash
set -euo pipefail
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

. "$ROOT_DIR/lib/common.sh"
. "$ROOT_DIR/lib/brew.sh"
. "$ROOT_DIR/lib/asdf.sh"
. "$ROOT_DIR/lib/shell.sh"

usage() {
  cat <<EOF
devbox — mac setup CLI

Usage:
  devbox [--config DIR] bootstrap           # full setup (safe to re-run)
  devbox [--config DIR] brew                # install all formulae & casks from config
  devbox [--config DIR] brew <name>         # install one package; auto-detect formula/cask; persist to config
  devbox [--config DIR] asdf                # install all asdf tools from config
  devbox [--config DIR] asdf <tool> <ver>   # install one tool@version (use 'latest'); persist to config
  devbox [--config DIR] shell               # zsh/oh-my-zsh/agnoster wiring
  devbox [--config DIR] apps                # first-launch registrations (docker, forti)
  devbox [--config DIR] doctor [--dry-run]  # print detected versions vs config
  devbox update                             # update devbox CLI to latest version
  devbox version                            # show version information
  devbox help

Options:
  --config DIR        Override config directory (default: \$HOME/.devbox)

Hidden:
  devbox --completion zsh|bash   # print shell completion to stdout
EOF
}

print_completion() {
  case "${1:-}" in
    zsh)  cat "$ROOT_DIR/completions/devbox.zsh" ;;
    bash) cat "$ROOT_DIR/completions/devbox.bash" ;;
    *)    die "Usage: devbox --completion zsh|bash" ;;
  esac
}

# Parse global options
if [[ "${1:-}" == "--config" ]]; then
  [[ -n "${2:-}" ]] || die "Missing DIR for --config"
  set_config_dir "$2"; shift 2
fi

if [[ "${1:-}" == "--completion" ]]; then
  print_completion "${2:-}"; exit 0
fi

ensure_config

cmd_bootstrap() {
  install_xcode_cli
  install_homebrew
  brew_update
  brew_install_from_list "$(brew_formulae_file)" formula
  brew tap homebrew/cask-fonts >/dev/null 2>&1 || true
  brew_install_from_list "$(brew_casks_file)" cask

  asdf_init
  asdf_install_from_json "$(asdf_tools_file)"

  ensure_zsh_default
  install_oh_my_zsh
  first_launch_apps

  log "Done. Open a new terminal or run: source \"$ZPROFILE\" && source \"$ZSHRC\""
}

cmd_brew_all() {
  install_homebrew
  brew_update
  brew_install_from_list "$(brew_formulae_file)" formula
  brew tap homebrew/cask-fonts >/dev/null 2>&1 || true
  brew_install_from_list "$(brew_casks_file)"    cask
}

cmd_brew_one() {
  local name="$1"
  install_homebrew
  brew_update
  if brew_is_cask "$name"; then
    brew_install_cask "$name"
    brew_append_config "$(brew_casks_file)" "$name"
  elif brew_is_formula "$name"; then
    brew_install_formula "$name"
    brew_append_config "$(brew_formulae_file)" "$name"
  else
    if brew install "$name" >/dev/null 2>&1; then
      log "Installed as formula: $name"
      brew_append_config "$(brew_formulae_file)" "$name"
    else
      log "Attempting as cask: $name"
      brew install --cask "$name"
      brew_append_config "$(brew_casks_file)" "$name"
    fi
  fi
}

cmd_asdf_all() {
  install_homebrew
  asdf_init
  asdf_install_from_json "$(asdf_tools_file)"
}

cmd_asdf_one() {
  local tool="$1" ver="$2"
  install_homebrew
  asdf_init
  asdf_install_tool "$tool" "$ver"
  asdf_persist_tool "$(asdf_tools_file)" "$tool" "$ver"
}

cmd_shell() { ensure_zsh_default; install_homebrew; asdf_init; install_oh_my_zsh; log "Shell configured."; }
cmd_apps()  { first_launch_apps; }

cmd_update() {
  local current_version latest_version temp_dir backup_dir
  
  # Check internet connectivity
  if ! curl -fsSL --connect-timeout 5 "https://api.github.com" >/dev/null 2>&1; then
    err "No internet connection. Cannot check for updates."
    exit 1
  fi
  
  # Get current version
  current_version="$(get_current_version)"
  log "Current version: $current_version"
  
  # Get latest version
  if ! latest_version="$(get_latest_version)"; then
    err "Unable to check for updates. Please check your internet connection."
    exit 1
  fi
  
  log "Latest version: $latest_version"
  
  # Compare versions
  if compare_versions "$current_version" "$latest_version"; then
    log "You are already on the latest version ($latest_version)"
    exit 0
  fi
  
  # Ask for confirmation
  echo ""
  warn "Update available: $current_version → $latest_version"
  echo -n "Do you want to update? [y/N]: "
  read -r response
  case "$response" in
    [yY]|[yY][eE][sS])
      ;;
    *)
      log "Update cancelled"
      exit 0
      ;;
  esac
  
  # Create temporary directories
  temp_dir="$(mktemp -d)"
  backup_dir="$(mktemp -d)"
  
  # Cleanup function
  cleanup() {
    rm -rf "$temp_dir" "$backup_dir"
  }
  trap cleanup EXIT
  
  # Backup current installation
  log "Backing up current installation..."
  if ! backup_installation "$backup_dir"; then
    err "Failed to backup current installation"
    exit 1
  fi
  
  # Update installation
  log "Updating to $latest_version..."
  if ! update_installation "$latest_version" "$temp_dir"; then
    err "Update failed. Restoring previous version..."
    restore_installation "$backup_dir"
    err "Update failed and rollback completed. Please try again later."
    exit 1
  fi
  
  # Verify installation
  if ! "$HOME/.local/bin/devbox" version >/dev/null 2>&1; then
    err "Update verification failed. Restoring previous version..."
    restore_installation "$backup_dir"
    err "Update failed and rollback completed. Please try again later."
    exit 1
  fi
  
  log "Successfully updated to $latest_version"
  log "Run 'devbox version' to verify the update"
}

cmd_doctor() {
  local dry_run=0
  if [[ "${1:-}" == "--dry-run" ]]; then dry_run=1; fi

  echo "Config dir: $CONFIG_DIR"
  echo ""
  echo "[brew formulae]"
  while read -r f; do
    [[ -z "$f" || "$f" =~ ^# ]] && continue
    printf "  %-24s : " "$f"
    if [[ $dry_run -eq 1 ]]; then
      echo "(dry-run)"; continue
    fi
    install_homebrew
    if brew_installed_formula "$f"; then brew info "$f" | head -1; else echo "MISSING"; fi
  done < "$(brew_formulae_file)"

  echo ""
  echo "[brew casks]"
  while read -r c; do
    [[ -z "$c" || "$c" =~ ^# ]] && continue
    printf "  %-24s : " "$c"
    if [[ $dry_run -eq 1 ]]; then
      echo "(dry-run)"; continue
    fi
    install_homebrew
    if brew_installed_cask "$c"; then echo "installed"; else echo "MISSING"; fi
  done < "$(brew_casks_file)"

  echo ""
  echo "[asdf tools]"
  for k in $(json_keys "$(asdf_tools_file)"); do
    v="$(json_read_k "$(asdf_tools_file)" "$k")"
    if [[ $dry_run -eq 1 ]]; then
      printf "  %-24s : wanted=%-10s current=(dry-run)\n" "$k" "$v"
      continue
    fi
    install_homebrew
    asdf_init
    cur="$(asdf current "$k" 2>/dev/null | awk '{print $2}')"
    printf "  %-24s : wanted=%-10s current=%s\n" "$k" "$v" "${cur:-MISSING}"
  done
}

case "${1:-help}" in
  bootstrap)    shift; cmd_bootstrap "$@";;
  brew)
    if [[ $# -gt 1 ]]; then shift; cmd_brew_one "$1"; else shift; cmd_brew_all; fi
    ;;
  asdf)
    if [[ $# -gt 2 ]]; then shift; cmd_asdf_one "$1" "$2"; else shift; cmd_asdf_all; fi
    ;;
  shell)        shift; cmd_shell;;
  apps)         shift; cmd_apps;;
  doctor)       shift; cmd_doctor "${1:-}";;
  update)       shift; cmd_update;;
  version)      show_version;;
  help|*)       usage;;
esac
